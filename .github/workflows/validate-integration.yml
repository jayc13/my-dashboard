name: Run Integration Tests

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version to use'
        required: false
        type: string
        default: 'v22.20.0'

    secrets:
      API_SECURITY_KEY:
        description: 'API security key'
        required: true
      FIREBASE_PROJECT_ID:
        description: 'Firebase project ID'
        required: true
      FIREBASE_PRIVATE_KEY:
        description: 'Firebase private key'
        required: true
      FIREBASE_CLIENT_EMAIL:
        description: 'Firebase client email'
        required: true
      FIREBASE_PRIVATE_KEY_ID:
        description: 'Firebase private key ID'
        required: true
      FIREBASE_CLIENT_ID:
        description: 'Firebase client ID'
        required: true
      FIREBASE_CLIENT_CERT_URL:
        description: 'Firebase client cert URL'
        required: true
      SERVER_GITHUB_TOKEN:
        description: 'Server GitHub token'
        required: false
      JIRA_API_TOKEN:
        description: 'Jira API token'
        required: false
      JIRA_BASE_URL:
        description: 'Jira base URL'
        required: false
      CIRCLE_CI_TOKEN:
        description: 'CircleCI token'
        required: false
      MYSQL_ROOT_PASSWORD:
        description: 'MySQL root password'
        required: false
      MYSQL_TEST_DATABASE:
        description: 'Test database name'
        required: false
      MYSQL_HOST:
        description: 'MySQL host'
        required: false
      MYSQL_PORT:
        description: 'MySQL port'
        required: false
      MYSQL_USER:
        description: 'MySQL user'
        required: false
      MYSQL_PASSWORD:
        description: 'MySQL password'
        required: false

permissions:
  contents: read

jobs:
  validate-integration:
    name: Validate Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}

      - name: Build projects
        run: |
          npm run build \
            --workspace=packages/types \
            --workspace=packages/sdk \
            --workspace=mock-server \
            --workspace=server \
            --workspace=tests/integration-tests

      - name: Run database migrations
        run: npm run migrate --workspace=server
        env:
          MYSQL_HOST: localhost
          MYSQL_PORT: 3306
          MYSQL_USER: root
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_db

      - name: Start mock-server in background
        working-directory: ./mock-server
        run: |
          # Set up environment variables for testing
          cat > .env << EOF
          PORT=3001

          # API Configuration
          CORS_ORIGIN=http://localhost:3000
          EOF

          # Start server in background
          npm start > mock-server.log 2>&1 &
          echo $! > mock-server.pid

          # Wait for server to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:3001/health; do sleep 2; done'

          # Verify health check status is "ok"
          HEALTH_RESPONSE=$(curl -sf http://localhost:3001/health)
          HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
          if [ "$HEALTH_STATUS" != "ok" ]; then
            echo "❌ Mock server health check failed. Status: $HEALTH_STATUS"
            echo "Health response: $HEALTH_RESPONSE"
            echo "Mock server logs:"
            cat mock-server.log
            exit 1
          fi
          echo "✅ Mock server health check passed. Status: $HEALTH_STATUS"

      - name: Start server in background
        working-directory: ./server
        run: |
          # Set up environment variables for testing
          cat > .env << EOF
          NODE_ENV=test
          DATA_DIR=./data
          BRUTE_FORCE_WINDOW_MS=600000
          BRUTE_FORCE_MAX_ATTEMPTS=100
          PORT=${{ secrets.SERVER_PORT || '3000' }}
          API_SECURITY_KEY=${{ secrets.API_SECURITY_KEY }}

          # MySQL Configuration
          MYSQL_HOST=localhost
          MYSQL_PORT=3306
          MYSQL_USER="root"
          MYSQL_PASSWORD=test_password
          MYSQL_DATABASE=test_db

          # Firebase Configuration
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
          FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }}

          # GitHub Configuration
          GITHUB_TOKEN=your-github-token
          GITHUB_URL=http://localhost:3001/github

          # Jira Configuration
          JIRA_BASE_URL=http://localhost:3001/jira
          JIRA_API_TOKEN="jira-token-placeholder"

          # CircleCI Configuration
          CIRCLE_CI_BASE_URL=http://localhost:3001/circleci
          CIRCLE_CI_PROJECT_PATH="jayc13/my-dashboard"
          CIRCLE_CI_TOKEN="your-circle-ci-token"

          # Redis Configuration
          REDIS_URL=redis://localhost:6379
          EOF

          # Start server in background
          npm start &
          echo $! > server.pid

          # Wait for server to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:3000/health; do sleep 2; done'

          # Verify health check status is "ok"
          HEALTH_RESPONSE=$(curl -sf http://localhost:3000/health)
          HEALTH_STATUS=$(echo "$HEALTH_RESPONSE" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
          if [ "$HEALTH_STATUS" != "ok" ]; then
            echo "❌ Server health check failed. Status: $HEALTH_STATUS"
            echo "Health response: $HEALTH_RESPONSE"
            echo "Server logs:"
            tail -n 100 server.log 2>/dev/null || echo "No server logs available"
            exit 1
          fi
          echo "✅ Server health check passed. Status: $HEALTH_STATUS"

      - name: Run integration tests
        working-directory: ./tests/integration-tests
        run: |
          # Set up environment variables for integration tests
          cat > .env << EOF
          NODE_ENV=test
          SERVER_URL=http://localhost:3000
          API_SECURITY_KEY=${{ secrets.API_SECURITY_KEY }}
          CI=true
          
          # MySQL Configuration
          MYSQL_HOST=localhost
          MYSQL_PORT=3306
          MYSQL_USER="root"
          MYSQL_PASSWORD=test_password
          MYSQL_DATABASE=test_db
          
          EOF

          # Run the integration tests
          npm test

      - name: Cleanup server process
        if: always()
        working-directory: ./server
        run: |
          # Kill background server process
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          if [ -f ./mock-server/mock-server.pid ]; then
            kill $(cat ./mock-server/mock-server.pid) || true
          fi
          # Kill any remaining processes on port 3000
          sudo lsof -ti:3001 | xargs -r sudo kill -9 || true
          sudo lsof -ti:3000 | xargs -r sudo kill -9 || true
          # Stop and remove Redis Docker container
          docker stop redis || true
          docker rm redis || true
