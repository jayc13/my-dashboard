name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: read

jobs:
  # Job 1: Basic validation and setup
  setup-and-validate:
    name: Setup and Basic Validation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      server-changed: ${{ steps.changes.outputs.server }}
      cron-changed: ${{ steps.changes.outputs.cron }}
      scripts-changed: ${{ steps.changes.outputs.scripts }}
      github-changed: ${{ steps.changes.outputs.github }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install commitlint
        run: npm install -D @commitlint/cli @commitlint/config-conventional

      - name: Validate PR commits with commitlint
        run: npx commitlint --config="./scripts/commitlint.config.js" --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            client:
              - 'client/**'
            server:
              - 'server/**'
            cron:
              - 'cron/**'
            scripts:
              - 'scripts/**'
            github:
              - '.github/**'

      - name: Validate PR title with commitlint
        run: |
          echo "üîç Validating PR title format..."
          echo "${{ github.event.pull_request.title }}" | npx commitlint --config="./scripts/commitlint.config.js" --verbose
          if [ $? -ne 0 ]; then
              echo "‚ùå PR title does not conform to conventional commit standards."
              exit 1
          else
              echo "‚úÖ PR title is valid."
          fi

      - name: Check for TODO and FIXME comments
        run: |
          echo "üìù Checking for TODO and FIXME comments..."

          # Run the TODO/FIXME detection script
          ./scripts/check-todos.sh

      - name: Estimate PR complexity
        run: |
          echo "üìä Estimating PR complexity..."
          
          # Count changed files and lines
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | wc -l)
          ADDED_LINES=$(git diff --numstat origin/main...HEAD | awk '{sum += $1} END {print sum}')
          DELETED_LINES=$(git diff --numstat origin/main...HEAD | awk '{sum += $2} END {print sum}')
          
          echo "Changed files: $CHANGED_FILES"
          echo "Added lines: $ADDED_LINES"
          echo "Deleted lines: $DELETED_LINES"
          
          # Provide complexity assessment
          if [[ $CHANGED_FILES -gt 20 ]] || [[ $ADDED_LINES -gt 500 ]]; then
            echo "‚ö†Ô∏è Large PR detected - consider breaking into smaller PRs"
          elif [[ $CHANGED_FILES -gt 10 ]] || [[ $ADDED_LINES -gt 200 ]]; then
            echo "üìè Medium-sized PR - ensure good test coverage"
          else
            echo "‚úÖ Small PR - good size for review"
          fi

  # Job 2: Client validation
  validate-client:
    name: Validate Client
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: needs.setup-and-validate.outputs.client-changed == 'true' || needs.setup-and-validate.outputs.github-changed == 'true'
    defaults:
      run:
        working-directory: ./client
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npx tsc --noEmit

      - name: Build client
        run: npm run build

      - name: Run unit tests
        run: npm run test

      - name: Bundle size analysis
        run: |
          echo "üì¶ Analyzing bundle size..."

          # Install bundle analyzer
          npm install --save-dev rollup-plugin-visualizer

          # Build with bundle analysis
          npm run build

          # Generate bundle stats
          echo "üìä Generating bundle statistics..."

          # Get current bundle sizes
          CURRENT_JS_SIZE=$(find dist/assets -name "*.js" -type f -exec wc -c {} + | tail -1 | awk '{print $1}')
          CURRENT_CSS_SIZE=$(find dist/assets -name "*.css" -type f -exec wc -c {} + | tail -1 | awk '{print $1}' || echo "0")
          CURRENT_TOTAL_SIZE=$((CURRENT_JS_SIZE + CURRENT_CSS_SIZE))

          echo "Current bundle sizes:"
          echo "  JavaScript: $(numfmt --to=iec-i --suffix=B $CURRENT_JS_SIZE)"
          echo "  CSS: $(numfmt --to=iec-i --suffix=B $CURRENT_CSS_SIZE)"
          echo "  Total: $(numfmt --to=iec-i --suffix=B $CURRENT_TOTAL_SIZE)"

          # Store current sizes for comparison
          echo "$CURRENT_TOTAL_SIZE" > current-bundle-size.txt
          echo "$CURRENT_JS_SIZE" > current-js-size.txt
          echo "$CURRENT_CSS_SIZE" > current-css-size.txt

          # Create detailed bundle report
          echo "üìã Bundle composition:"
          find dist/assets -type f \( -name "*.js" -o -name "*.css" \) -exec ls -lh {} \; | \
            awk '{print "  " $9 ": " $5}'

      - name: Compare with main branch
        run: |
          echo "üîç Comparing bundle size with main branch..."

          # Fetch main branch for comparison
          git fetch origin main:main

          # Checkout main branch in a temporary directory
          mkdir -p /tmp/main-build
          git archive main | tar -x -C /tmp/main-build

          # Build main branch
          cd /tmp/main-build/client
          npm ci --silent
          npm run build --silent

          # Get main branch bundle sizes
          MAIN_JS_SIZE=$(find dist/assets -name "*.js" -type f -exec wc -c {} + | tail -1 | awk '{print $1}')
          MAIN_CSS_SIZE=$(find dist/assets -name "*.css" -type f -exec wc -c {} + | tail -1 | awk '{print $1}' || echo "0")
          MAIN_TOTAL_SIZE=$((MAIN_JS_SIZE + MAIN_CSS_SIZE))

          # Return to PR branch directory
          cd $GITHUB_WORKSPACE/client

          # Read current sizes
          CURRENT_TOTAL_SIZE=$(cat current-bundle-size.txt)
          CURRENT_JS_SIZE=$(cat current-js-size.txt)
          CURRENT_CSS_SIZE=$(cat current-css-size.txt)

          # Calculate differences
          TOTAL_DIFF=$((CURRENT_TOTAL_SIZE - MAIN_TOTAL_SIZE))
          JS_DIFF=$((CURRENT_JS_SIZE - MAIN_JS_SIZE))
          CSS_DIFF=$((CURRENT_CSS_SIZE - MAIN_CSS_SIZE))

          # Calculate percentage changes
          if [ $MAIN_TOTAL_SIZE -gt 0 ]; then
            TOTAL_PERCENT=$(echo "scale=2; $TOTAL_DIFF * 100 / $MAIN_TOTAL_SIZE" | bc -l)
          else
            TOTAL_PERCENT="N/A"
          fi

          echo "üìä Bundle size comparison with main branch:"
          echo "Main branch sizes:"
          echo "  JavaScript: $(numfmt --to=iec-i --suffix=B $MAIN_JS_SIZE)"
          echo "  CSS: $(numfmt --to=iec-i --suffix=B $MAIN_CSS_SIZE)"
          echo "  Total: $(numfmt --to=iec-i --suffix=B $MAIN_TOTAL_SIZE)"
          echo ""
          echo "Current PR sizes:"
          echo "  JavaScript: $(numfmt --to=iec-i --suffix=B $CURRENT_JS_SIZE)"
          echo "  CSS: $(numfmt --to=iec-i --suffix=B $CURRENT_CSS_SIZE)"
          echo "  Total: $(numfmt --to=iec-i --suffix=B $CURRENT_TOTAL_SIZE)"
          echo ""
          echo "Size changes:"
          if [ $TOTAL_DIFF -gt 0 ]; then
            echo "  Total: +$(numfmt --to=iec-i --suffix=B $TOTAL_DIFF) (+${TOTAL_PERCENT}%)"
          elif [ $TOTAL_DIFF -lt 0 ]; then
            echo "  Total: $(numfmt --to=iec-i --suffix=B $TOTAL_DIFF) (${TOTAL_PERCENT}%)"
          else
            echo "  Total: No change"
          fi

          if [ $JS_DIFF -gt 0 ]; then
            echo "  JavaScript: +$(numfmt --to=iec-i --suffix=B $JS_DIFF)"
          elif [ $JS_DIFF -lt 0 ]; then
            echo "  JavaScript: $(numfmt --to=iec-i --suffix=B $JS_DIFF)"
          else
            echo "  JavaScript: No change"
          fi

          if [ $CSS_DIFF -gt 0 ]; then
            echo "  CSS: +$(numfmt --to=iec-i --suffix=B $CSS_DIFF)"
          elif [ $CSS_DIFF -lt 0 ]; then
            echo "  CSS: $(numfmt --to=iec-i --suffix=B $CSS_DIFF)"
          else
            echo "  CSS: No change"
          fi

          # Store comparison results for next step
          echo "$TOTAL_DIFF" > bundle-size-diff.txt
          echo "$TOTAL_PERCENT" > bundle-size-percent.txt

      - name: Bundle size validation
        run: |
          echo "‚öñÔ∏è Validating bundle size changes..."

          TOTAL_DIFF=$(cat bundle-size-diff.txt)
          TOTAL_PERCENT=$(cat bundle-size-percent.txt)

          # Define thresholds
          MAX_SIZE_INCREASE=524288  # 512KB in bytes
          MAX_PERCENT_INCREASE=10   # 10% increase

          # Check if bundle size increased significantly
          SHOULD_FAIL=false

          if [ $TOTAL_DIFF -gt $MAX_SIZE_INCREASE ]; then
            echo "‚ùå Bundle size increased by more than $(numfmt --to=iec-i --suffix=B $MAX_SIZE_INCREASE)"
            SHOULD_FAIL=true
          fi

          # Check percentage increase (only if we have a valid percentage)
          if [ "$TOTAL_PERCENT" != "N/A" ]; then
            PERCENT_INT=$(echo "$TOTAL_PERCENT" | cut -d'.' -f1)
            if [ "$PERCENT_INT" -gt $MAX_PERCENT_INCREASE ]; then
              echo "‚ùå Bundle size increased by more than ${MAX_PERCENT_INCREASE}% (${TOTAL_PERCENT}%)"
              SHOULD_FAIL=true
            fi
          fi

          if [ "$SHOULD_FAIL" = true ]; then
            echo ""
            echo "üö® Bundle size increase is too large!"
            echo "Please consider:"
            echo "  ‚Ä¢ Code splitting to reduce initial bundle size"
            echo "  ‚Ä¢ Lazy loading of components and routes"
            echo "  ‚Ä¢ Tree shaking to remove unused code"
            echo "  ‚Ä¢ Analyzing dependencies with 'npm run build -- --analyze'"
            echo "  ‚Ä¢ Using dynamic imports for large libraries"
            echo ""
            exit 1
          elif [ $TOTAL_DIFF -gt 0 ]; then
            echo "‚ö†Ô∏è Bundle size increased but within acceptable limits"
            echo "Consider monitoring this change and optimizing if possible"
          elif [ $TOTAL_DIFF -lt 0 ]; then
            echo "‚úÖ Bundle size decreased - great optimization!"
          else
            echo "‚úÖ Bundle size unchanged"
          fi

          # Clean up temporary files
          rm -f current-bundle-size.txt current-js-size.txt current-css-size.txt
          rm -f bundle-size-diff.txt bundle-size-percent.txt

  # Job 3: Server validation
  validate-server:
    name: Validate Server
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: needs.setup-and-validate.outputs.server-changed == 'true' || needs.setup-and-validate.outputs.github-changed == 'true'
    defaults:
      run:
        working-directory: ./server
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Build server
        run: npm run build

      - name: Test database migrations
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: test_db
        run: |
          echo "TODO: Implement migration testing"
          echo "TODO: Run migrations against test database"
          echo "TODO: Verify schema changes"

      - name: Run unit tests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: test_password
          DB_NAME: test_db
        run: npm test

  # Job 4: Cron validation
  validate-cron:
    name: Validate Cron
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: needs.setup-and-validate.outputs.cron-changed == 'true' || needs.setup-and-validate.outputs.github-changed == 'true'
    defaults:
      run:
        working-directory: ./cron
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: cron/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npx tsc --noEmit

      - name: Run linting
        run: npm run lint

      - name: Build cron
        run: npm run build

      - name: Run tests
        run: |
          echo "TODO: Implement cron job tests"
          echo "TODO: Add unit tests for cron job logic"
          echo "TODO: Test cron schedule validation"

      - name: Validate cron configuration
        run: |
          echo "TODO: Implement cron configuration validation"
          echo "TODO: Validate cron expressions"
          echo "TODO: Check for proper error handling"

  # Job 5: Scripts validation
  validate-scripts:
    name: Validate Scripts
    runs-on: ubuntu-latest
    needs: setup-and-validate
    if: needs.setup-and-validate.outputs.scripts-changed == 'true' || needs.setup-and-validate.outputs.github-changed == 'true'
    defaults:
      run:
        working-directory: ./scripts
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: scripts/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Validate scripts
        run: |
          echo "TODO: Implement script validation"
          echo "TODO: Run shellcheck for shell scripts"
          echo "TODO: Validate Node.js scripts syntax"

      - name: Test scripts
        run: |
          echo "TODO: Implement script testing"
          echo "TODO: Test script functionality in safe environment"
          echo "TODO: Validate script outputs"

  # Job 6: Final validation and summary
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [setup-and-validate, validate-client, validate-server, validate-cron, validate-scripts]
    if: always()
    steps:
      - name: Check all validations
        run: |
          echo "=== Pull Request Validation Summary ==="
          echo "Client validation: ${{ needs.validate-client.result }}"
          echo "Server validation: ${{ needs.validate-server.result }}"
          echo "Cron validation: ${{ needs.validate-cron.result }}"
          echo "Scripts validation: ${{ needs.validate-scripts.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.validate-client.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-server.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-cron.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-scripts.result }}" == "failure" ]]; then
            echo "‚ùå One or more validations failed"
            exit 1
          else
            echo "‚úÖ All validations passed"
          fi

      - name: Comment on PR
        if: always()
        run: |
          echo "TODO: Implement PR commenting"
          echo "TODO: Post validation results as PR comment"
          echo "TODO: Include links to failed checks and suggestions"
