name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  # Job 1: Basic validation and setup
  basic-validation:
    name: Init
    if: github.event.pull_request.draft == false
    uses: ./.github/workflows/basic-validation.yml
    with:
      pr-title: ${{ github.event.pull_request.title }}
      base-sha: ${{ github.event.pull_request.base.sha }}
      head-sha: ${{ github.event.pull_request.head.sha }}
      pr-number: ${{ github.event.pull_request.number }}

  # Job 2: Packages Types validation (must run before other packages)
  validate-packages-types:
    name: Packages Types
    needs: basic-validation
    if: needs.basic-validation.outputs.packages-types-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-packages-types.yml

  # Job 3: Packages SDK validation (depends on types)
  validate-packages-sdk:
    name: Packages SDK
    needs: [basic-validation, validate-packages-types]
    if: needs.basic-validation.outputs.packages-sdk-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-packages-sdk.yml

  # Job 4: Client validation
  validate-client:
    name: Client
    needs: [basic-validation, validate-packages-types, validate-packages-sdk]
    if: always() && (needs.basic-validation.outputs.client-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true')
    uses: ./.github/workflows/validate-client.yml

  # Job 5: Server validation
  validate-server:
    name: Server
    needs: [basic-validation, validate-packages-types]
    if: always() && (needs.basic-validation.outputs.server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true')
    uses: ./.github/workflows/validate-server.yml

  # Job 6: Mock Server validation
  validate-mock-server:
    name: Mock Server
    needs: [basic-validation, validate-packages-types]
    if: always() && (needs.basic-validation.outputs.mock-server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true')
    uses: ./.github/workflows/validate-mock-server.yml

  # Job 7: Cron validation
  validate-cron:
    name: Cron
    needs: [basic-validation, validate-packages-types, validate-packages-sdk]
    if: needs.basic-validation.outputs.cron-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-cron.yml

  # Job 8: Scripts validation
  validate-scripts:
    name: Scripts
    needs: basic-validation
    if: needs.basic-validation.outputs.scripts-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-scripts.yml

  # Job 9: Tests Integration validation
  validate-tests-integration:
    name: Tests Integration
    needs: [basic-validation, validate-packages-types, validate-packages-sdk]
    if: needs.basic-validation.outputs.tests-integration-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-tests-integration.yml

  # Job 10: Tests E2E validation
  validate-tests-e2e:
    name: Tests E2E
    needs: [basic-validation, validate-packages-types, validate-packages-sdk]
    if: needs.basic-validation.outputs.tests-e2e-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-tests-e2e.yml

  # Job 11: Documentation validation
  validate-docs:
    name: Documentation
    needs: basic-validation
    if: needs.basic-validation.outputs.docs-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-docs.yml
    with:
      docs-changed: ${{ needs.basic-validation.outputs.docs-changed == 'true' }}

  # Job 12: Integration testing
  integration-testing:
    name: Integration Testing
    needs: [ basic-validation, validate-packages-types, validate-packages-sdk, validate-server, validate-mock-server ]
    if: (needs.basic-validation.outputs.tests-integration-changed == 'true' || needs.basic-validation.outputs.server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true') && needs.validate-server.result == 'success' && (needs.validate-mock-server.result == 'success' || needs.validate-mock-server.result == 'skipped')
    uses: ./.github/workflows/validate-integration.yml
    secrets:
      API_SECURITY_KEY: ${{ secrets.API_SECURITY_KEY }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
      FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
      FIREBASE_CLIENT_CERT_URL: ${{ secrets.FIREBASE_CLIENT_CERT_URL }}
      SERVER_GITHUB_TOKEN: ${{ secrets.SERVER_GITHUB_TOKEN }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}

  # Job 13: E2E testing
  e2e-testing:
    name: E2E Testing
    container: mcr.microsoft.com/playwright:v1.55.1-noble
    runs-on: ubuntu-latest
    needs: [ basic-validation, validate-packages-types, validate-packages-sdk, validate-client, validate-server, integration-testing ]
    if: (needs.basic-validation.result == 'success' || needs.basic-validation.outputs.tests-e2e-changed ) && (needs.basic-validation.outputs.client-changed == 'true' || needs.basic-validation.outputs.server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true') && (needs.integration-testing.result == 'success' || needs.integration-testing.result == 'skipped') && (needs.validate-client.result == 'success' || needs.validate-client.result == 'skipped') && (needs.validate-server.result == 'success' || needs.validate-server.result == 'skipped')
    timeout-minutes: 30
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: ./.github/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}
          working-directory: ${{ github.workspace }}

      - name: Build projects
        run: |
          # Set up environment variables for testing
          cat > ./client/.env << EOF
          VITE_API_URL=http://localhost:${{ secrets.SERVER_PORT || '3000' }}
          VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          EOF
          
          npm run build \
            --workspace=packages/types \
            --workspace=packages/sdk \
            --workspace=server \
            --workspace=mock-server \
            --workspace=client

      - name: Run database migrations
        env:
          NODE_ENV: test
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_USER: root
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        run: pnpm --filter=server run migrate

      - name: Start mock-server in background
        working-directory: ./mock-server
        run: |
          # Set up environment variables for testing
          cat > .env << EOF
          PORT=3001
          
          # API Configuration
          CORS_ORIGIN=http://localhost:3000
          EOF

          # Start server in background
          npm start > mock-server.log 2>&1 &
          echo $! > mock-server.pid

          # Wait for server to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:3001/health; do sleep 2; done'

      - name: Start server in background
        working-directory: ./server
        run: |
          # Set up environment variables for testing
          cat > .env << EOF
          NODE_ENV=test
          DATA_DIR=./data
          BRUTE_FORCE_WINDOW_MS=600000
          BRUTE_FORCE_MAX_ATTEMPTS=100
          PORT=${{ secrets.SERVER_PORT || '3000' }}
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_USER: root
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          API_SECURITY_KEY=${{ secrets.API_SECURITY_KEY }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
          FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }}
          GITHUB_TOKEN=your-github-token
          GITHUB_URL=http://localhost:3001/github
          JIRA_API_TOKEN="jira-token-placeholder"
          JIRA_BASE_URL=http://localhost:3001/jira
          CIRCLE_CI_TOKEN=your-circle-ci-token
          E2E_PIPELINE_URL=circle-ci-pipeline-url
          EOF

          # Start server in background
          npm start > server.log 2>&1 &
          echo $! > server.pid

          # Wait for server to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:${{ secrets.SERVER_PORT || '3000' }}/health; do sleep 2; done'

      - name: Start client
        working-directory: ./client
        run: |
          # Start client server in background
          npm run preview &
          echo $! > client.pid

          # Wait for client to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:${{ secrets.CLIENT_PORT || '4173' }}; do sleep 2; done'

      - name: Run E2E tests
        working-directory: ./tests/e2e-tests
        run: |
          # Set up environment variables for e2e tests
          cat > .env << EOF
          BASE_URL=http://localhost:${{ secrets.CLIENT_PORT || '4173' }}
          API_URL=http://localhost:${{ secrets.SERVER_PORT || '3000' }}
          API_SECURITY_KEY=${{ secrets.API_SECURITY_KEY }}
          MYSQL_HOST: mysql
          MYSQL_PORT: 3306
          MYSQL_USER: root
          MYSQL_PASSWORD: test_password
          MYSQL_DATABASE: test_db
          CI=true
          EOF

          # Run the tests
          npm run test:chromium
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-report
          path: tests/e2e-tests/playwright-report/
          retention-days: 1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-test-report
          path: tests/e2e-tests/test-results/
          retention-days: 1

      - name: Upload server logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: server-logs
          path: server/server.log
          retention-days: 1

      - name: Cleanup processes
        if: always()
        run: |
          # Kill background processes
          if [ -f ./server/server.pid ]; then
            kill $(cat ./server/server.pid) || true
          fi
          if [ -f ./mock-server/mock-server.pid ]; then
            kill $(cat ./mock-server/mock-server.pid) || true
          fi
          if [ -f ./client/client.pid ]; then
            kill $(cat ./client/client.pid) || true
          fi
          # Kill any remaining processes on the ports
          sudo lsof -ti:3001 | xargs -r sudo kill -9 || true
          sudo lsof -ti:${{ secrets.SERVER_PORT || '3000' }} | xargs -r sudo kill -9 || true
          sudo lsof -ti:${{ secrets.CLIENT_PORT || '4173' }} | xargs -r sudo kill -9 || true

  # Job 14: Final validation and summary
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [ basic-validation, validate-packages-types, validate-packages-sdk, validate-client, validate-server, validate-mock-server, validate-cron, validate-scripts, validate-tests-integration, validate-tests-e2e, validate-docs, integration-testing, e2e-testing ]
    if: always()
    steps:
      - name: Check all validations
        run: |
          echo "=== Pull Request Validation Summary ==="
          echo "Basic validation: ${{ needs.basic-validation.result }}"
          echo "Packages Types validation: ${{ needs.validate-packages-types.result }}"
          echo "Packages SDK validation: ${{ needs.validate-packages-sdk.result }}"
          echo "Client validation: ${{ needs.validate-client.result }}"
          echo "Server validation: ${{ needs.validate-server.result }}"
          echo "Mock Server validation: ${{ needs.validate-mock-server.result }}"
          echo "Cron validation: ${{ needs.validate-cron.result }}"
          echo "Scripts validation: ${{ needs.validate-scripts.result }}"
          echo "Tests Integration validation: ${{ needs.validate-tests-integration.result }}"
          echo "Tests E2E validation: ${{ needs.validate-tests-e2e.result }}"
          echo "Documentation validation: ${{ needs.validate-docs.result }}"
          echo "Integration testing: ${{ needs.integration-testing.result }}"
          echo "E2E testing: ${{ needs.e2e-testing.result }}"

          # Fail if any required job failed
          if [[ "${{ needs.basic-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-packages-types.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-packages-sdk.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-client.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-server.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-mock-server.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-cron.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-scripts.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-tests-integration.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-tests-e2e.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-docs.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-testing.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-testing.result }}" == "failure" ]]; then
            echo "❌ One or more validations failed"
            exit 1
          else
            echo "✅ All validations passed"
          fi

      - name: Checkout repository
        if: always()
        uses: actions/checkout@v5

      - name: Comment on PR
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          # Generate the summary message
          echo "=== Generating PR Summary ==="
          SUMMARY_MESSAGE=$(bash ${{ github.workspace }}/scripts/ci/generate-pr-summary.sh \
            "${{ needs.basic-validation.result }}" \
            "${{ needs.validate-packages-types.result }}" \
            "${{ needs.validate-packages-sdk.result }}" \
            "${{ needs.validate-client.result }}" \
            "${{ needs.validate-server.result }}" \
            "${{ needs.validate-mock-server.result }}" \
            "${{ needs.validate-cron.result }}" \
            "${{ needs.validate-scripts.result }}" \
            "${{ needs.validate-tests-integration.result }}" \
            "${{ needs.validate-tests-e2e.result }}" \
            "${{ needs.validate-docs.result }}" \
            "${{ needs.integration-testing.result }}" \
            "${{ needs.e2e-testing.result }}")

          # Post/update the comment
          echo "=== Posting PR Comment ==="
          COMMENT_ID="pull-request-validation-summary"
          bash ${{ github.workspace }}/scripts/ci/pr-comment.sh "$COMMENT_ID" "$SUMMARY_MESSAGE"
