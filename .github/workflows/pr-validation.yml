name: Pull Request Validation

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]

# Cancel in-progress runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

jobs:
  # Job 1: Basic validation and setup
  basic-validation:
    name: Init
    if: github.event.pull_request.draft == false
    uses: ./.github/workflows/basic-validation.yml
    with:
      pr-title: ${{ github.event.pull_request.title }}
      base-sha: ${{ github.event.pull_request.base.sha }}
      head-sha: ${{ github.event.pull_request.head.sha }}
      pr-number: ${{ github.event.pull_request.number }}

  # Job 2: Client validation
  validate-client:
    name: Client
    needs: basic-validation
    if: needs.basic-validation.outputs.client-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-client.yml

  # Job 3: Server validation
  validate-server:
    name: Server
    needs: basic-validation
    if: needs.basic-validation.outputs.server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-server.yml

  # Job 4: Cron validation
  validate-cron:
    name: Cron
    needs: basic-validation
    if: needs.basic-validation.outputs.cron-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-cron.yml

  # Job 5: Scripts validation
  validate-scripts:
    name: Scripts
    needs: basic-validation
    if: needs.basic-validation.outputs.scripts-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-scripts.yml

  # Job 6: Documentation validation
  validate-docs:
    name: Documentation
    needs: basic-validation
    if: needs.basic-validation.outputs.docs-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true'
    uses: ./.github/workflows/validate-docs.yml
    with:
      docs-changed: ${{ needs.basic-validation.outputs.docs-changed == 'true' }}

  # Job 7: Integration testing
  integration-testing:
    name: Integration Testing
    needs: [ basic-validation, validate-server ]
    if: (needs.basic-validation.outputs.server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true') && needs.validate-server.result == 'success'
    uses: ./.github/workflows/validate-integration.yml
    secrets:
      API_SECURITY_KEY: ${{ secrets.API_SECURITY_KEY }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
      FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
      FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
      FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
      FIREBASE_CLIENT_CERT_URL: ${{ secrets.FIREBASE_CLIENT_CERT_URL }}
      SERVER_GITHUB_TOKEN: ${{ secrets.SERVER_GITHUB_TOKEN }}
      JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
      CIRCLE_CI_TOKEN: ${{ secrets.CIRCLE_CI_TOKEN }}

  # Job 8: E2E testing
  e2e-testing:
    name: E2E Testing
    runs-on: ubuntu-latest
    needs: [ basic-validation, validate-client, validate-server, integration-testing ]
    if: always() && needs.basic-validation.result == 'success' && (needs.basic-validation.outputs.client-changed == 'true' || needs.basic-validation.outputs.server-changed == 'true' || needs.basic-validation.outputs.github-changed == 'true') && (needs.integration-testing.result == 'success' || needs.integration-testing.result == 'skipped') && (needs.validate-client.result == 'success' || needs.validate-client.result == 'skipped') && (needs.validate-server.result == 'success' || needs.validate-server.result == 'skipped')
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'npm'
          cache-dependency-path: |
            server/package-lock.json
            client/package-lock.json
            tests/e2e-tests/package-lock.json
            packages/types/package-lock.json

      - name: Install @my-dashboard/types dependencies
        working-directory: ./packages/types
        run: npm ci

      - name: Install server dependencies
        working-directory: ./server
        run: npm ci

      - name: Install client dependencies
        working-directory: ./client
        run: npm ci

      - name: Install e2e test dependencies
        working-directory: ./tests/e2e-tests
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./tests/e2e-tests
        run: npx playwright install chromium --with-deps

      - name: Build @my-dashboard/types
        working-directory: ./packages/types
        run: npm run build

      - name: Build client application
        working-directory: ./client
        run: npm run build

      - name: Build server application
        working-directory: ./server
        run: npm run build

      - name: Setup test database
        run: |
          # Start MySQL service
          sudo systemctl start mysql
          # Create test database
          mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD || 'root' }} -e "CREATE DATABASE IF NOT EXISTS ${{ secrets.MYSQL_TEST_DATABASE || 'cypress_dashboard_test' }};"

      - name: Run database migrations
        working-directory: ./server
        run: npm run migrate
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST || 'localhost' }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT || '3306' }}
          MYSQL_USER: ${{ secrets.MYSQL_USER || 'root' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || secrets.MYSQL_ROOT_PASSWORD || 'root' }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_TEST_DATABASE || 'cypress_dashboard_test' }}

      - name: Start server in background
        working-directory: ./server
        run: |
          # Set up environment variables for testing
          cat > .env << EOF
          NODE_ENV=test
          DATA_DIR=./data
          BRUTE_FORCE_WINDOW_MS=600000
          BRUTE_FORCE_MAX_ATTEMPTS=20
          PORT=${{ secrets.SERVER_PORT || '3000' }}
          MYSQL_HOST=${{ secrets.MYSQL_HOST || 'localhost' }}
          MYSQL_PORT=${{ secrets.MYSQL_PORT || '3306' }}
          MYSQL_USER=${{ secrets.MYSQL_USER || 'root' }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD || secrets.MYSQL_ROOT_PASSWORD || 'root' }}
          MYSQL_DATABASE=${{ secrets.MYSQL_TEST_DATABASE || 'cypress_dashboard_test' }}
          API_SECURITY_KEY=${{ secrets.API_SECURITY_KEY }}
          FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY="${{ secrets.FIREBASE_PRIVATE_KEY }}"
          FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_CLIENT_CERT_URL=${{ secrets.FIREBASE_CLIENT_CERT_URL }}
          GITHUB_TOKEN=${{ secrets.SERVER_GITHUB_TOKEN }}
          JIRA_API_TOKEN=${{ secrets.JIRA_API_TOKEN }}
          JIRA_BASE_URL=${{ secrets.JIRA_BASE_URL }}
          CIRCLE_CI_TOKEN=${{ secrets.CIRCLE_CI_TOKEN }}
          EOF

          # Start server in background
          npm start &
          echo $! > server.pid

          # Wait for server to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:${{ secrets.SERVER_PORT || '3000' }}/health; do sleep 2; done'

      - name: Start client development server
        working-directory: ./client
        run: |
          # Set up environment variables for testing
          cat > .env << EOF
          VITE_API_URL=http://localhost:${{ secrets.SERVER_PORT || '3000' }}
          VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }}
          EOF

          # Start client dev server in background
          npm run dev &
          echo $! > client.pid

          # Wait for client to be ready
          timeout 60 bash -c 'until curl -sf http://localhost:${{ secrets.CLIENT_PORT || '5173' }}; do sleep 2; done'

      - name: Run E2E tests
        working-directory: ./tests/e2e-tests
        run: |
          # Set up environment variables for e2e tests
          cat > .env << EOF
          BASE_URL=http://localhost:${{ secrets.CLIENT_PORT || '5173' }}
          API_URL=http://localhost:${{ secrets.SERVER_PORT || '3000' }}
          API_SECURITY_KEY=${{ secrets.API_SECURITY_KEY }}
          CI=true
          EOF

          # Run the tests
          npm run test:chromium
        env:
          CI: true

      - name: Upload test videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-videos
          path: tests/e2e-tests/test-results/
          retention-days: 3

      - name: Cleanup processes
        if: always()
        run: |
          # Kill background processes
          if [ -f ./server/server.pid ]; then
            kill $(cat ./server/server.pid) || true
          fi
          if [ -f ./client/client.pid ]; then
            kill $(cat ./client/client.pid) || true
          fi
          # Kill any remaining processes on the ports
          sudo lsof -ti:${{ secrets.SERVER_PORT || '3000' }} | xargs -r sudo kill -9 || true
          sudo lsof -ti:${{ secrets.CLIENT_PORT || '5173' }} | xargs -r sudo kill -9 || true

  # Job 9: Final validation and summary
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [ basic-validation, validate-client, validate-server, validate-cron, validate-scripts, validate-docs, integration-testing, e2e-testing ]
    if: always()
    steps:
      - name: Check all validations
        run: |
          echo "=== Pull Request Validation Summary ==="
          echo "Basic validation: ${{ needs.basic-validation.result }}"
          echo "Client validation: ${{ needs.validate-client.result }}"
          echo "Server validation: ${{ needs.validate-server.result }}"
          echo "Cron validation: ${{ needs.validate-cron.result }}"
          echo "Scripts validation: ${{ needs.validate-scripts.result }}"
          echo "Documentation validation: ${{ needs.validate-docs.result }}"
          echo "Integration testing: ${{ needs.integration-testing.result }}"
          echo "E2E testing: ${{ needs.e2e-testing.result }}"

          # Fail if any required job failed
          if [[ "${{ needs.basic-validation.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-client.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-server.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-cron.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-scripts.result }}" == "failure" ]] || \
             [[ "${{ needs.validate-docs.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-testing.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-testing.result }}" == "failure" ]]; then
            echo "❌ One or more validations failed"
            exit 1
          else
            echo "✅ All validations passed"
          fi

      - name: Checkout repository
        if: always()
        uses: actions/checkout@v4

      - name: Comment on PR
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          # Generate the summary message
          echo "=== Generating PR Summary ==="
          SUMMARY_MESSAGE=$(bash ${{ github.workspace }}/scripts/ci/generate-pr-summary.sh \
            "${{ needs.basic-validation.result }}" \
            "${{ needs.validate-client.result }}" \
            "${{ needs.validate-server.result }}" \
            "${{ needs.validate-cron.result }}" \
            "${{ needs.validate-scripts.result }}" \
            "${{ needs.validate-docs.result }}" \
            "${{ needs.integration-testing.result }}" \
            "${{ needs.e2e-testing.result }}")

          # Post/update the comment
          echo "=== Posting PR Comment ==="
          COMMENT_ID="pull-request-validation-summary"
          bash ${{ github.workspace }}/scripts/ci/pr-comment.sh "$COMMENT_ID" "$SUMMARY_MESSAGE"
